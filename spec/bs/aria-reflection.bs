<pre class=metadata>
Title: ARIA reflection and Web Components
Shortname: aom-aria
Level: 1
Status: UD
URL: https://wicg.github.io/aom
Group: WICG
Editor: Alice Boxhall, Google, aboxhall@google.com
Editor: James Craig, Apple, jcraig@apple.com
Editor: Dominic Mazzoni, Google, dmazzoni@google.com
Editor: Alexander Surkov, Mozilla, surkov.alexander@gmail.com
Abstract: This specification describes the additions to existing 
Abstract: specifications which will make it possible for web authors 
Abstract: to programmatically express Element semantics.
Markup Shorthands: markdown yes
</pre>
    
## Interface Mixin AccessibilityRole on ShadowRoot and CustomElementOptions ## {#}
      <pre class="idl">
ShadowRoot includes AccessibilityRole;

</pre>

## Interface Mixin AriaAttributes ## {#AriaAttributes}
<pre class="idl">
ShadowRoot includes AriaAttributes;
</pre>


## Interaction between <code>ShadowRoot</code> and <code>host</code> ## {#shadowroot_interaction}

If an
<code>Element</code> has an attached
<code>ShadowRoot</code>, and the author has access to the
<code>ShadowRoot</code>, authors may set a
<code>role</code> or ARIA attribute, such as
<a href="#dom-ariaattributes-ariaactivedescendant">
<code>ariaActivedescendant</code>
</a>, on
<em>either</em> the
<code>Element</code>,
<em>or</em> the
<code>ShadowRoot</code>, or both.

If an IDL property from either the
<code>AccessibilityRole</code> mixin or the
<code>AriaAttributes</code> mixin is set on
<em>either</em> the
<code>Element</code>
<em>or</em> its associated
<code>ShadowRoot</code>, that IDL attribute should be
<a href="https://www.w3.org/TR/core-aam-1.1/#mapping_general">mapped</a>
to the
<a href="https://www.w3.org/TR/core-aam-1.1/#dfn-accessible-object">accessible object</a>
<a href="https://www.w3.org/TR/core-aam-1.1/#include_elements">associated</a>
with the host
<code>Element</code>.

If a property is set to a non-
<code>null</code> value on
<em>both</em> the
<code>ShadowRoot</code>
and the host
<code>Element</code>, the reflected value on the host
<code>Element</code> takes precedence, i.e. the reflected
<code>role</code> value on the host
<code>Element</code>
is used to compute the
<a href="https://www.w3.org/TR/core-aam-1.1/#mapping_role">mapped role</a>
in the
<a href="https://www.w3.org/TR/core-aam-1.1/#dfn-accessibility-tree">accessibility tree</a>, regardless of the value of the
<code>role</code> value on the associated
<code>ShadowRoot</code>, and similarly for all ARIA attribute properties.

<aside class="example">
For example, an author creating a
<a href="https://html.spec.whatwg.org/multipage/#custom-elements">Custom Element</a>
may use a
<code>ShadowRoot</code> to encapsulate implementation details for the element.

They may use the
<code>ShadowRoot</code> to encode certain "default" values for the ARIA
<code>role</code> and properties for the element, which an author using the Custom Element may choose to override using
reflected ARIA properties.

<pre>
class CustomCheckbox extends HTMLElement {

  // ...

  constructor() {
    super();
    this.attachShadow({mode: 'open'});  // mode may also be "closed".

    // ... any other set-up
  }

  connectedCallback() {
    // Set the default semantics for the custom element
    // when it is inserted in the page.
    this.shadowRoot.role = "checkbox";
  }

  // Observe the custom "checked" attribute
  static get observedAttributes() { return ["checked"]; }

  // ... setters/getters for properties which reflect to attributes

  // When the custom "checked" attribute changes,
  // keep the accessible checked state in sync.
  attributeChangedCallback(name, oldValue, newValue) {
  switch(name) {
    case "checked":
      this.shadowRoot.ariaChecked = (newValue !== null);
    }
  }
}

customElements.define("custom-checkbox", CustomCheckbox);
</pre>

An author using the Custom Element could then use the reflected ARIA properties/content attributes to override the
default values, just as they would when using a native element:</p>

<pre>
&lt;!-- ARIA role overrides Shadow DOM role --&gt;
&lt;custom-checkbox role="radio"&gt;
</pre>

</aside>
