<pre class=metadata>
Title: ARIA reflection and Web Components
Shortname: aom-aria
Level: 1
Status: UD
URL: https://wicg.github.io/aom
Group: WICG
Editor: Alice Boxhall, Google, aboxhall@google.com
Editor: James Craig, Apple, jcraig@apple.com
Editor: Dominic Mazzoni, Google, dmazzoni@google.com
Editor: Alexander Surkov, Mozilla, surkov.alexander@gmail.com
Abstract: This specification describes the additions to existing
Abstract: specifications which will make it possible for web authors
Abstract: to programmatically express semantics for Web Components.
Markup Shorthands: markdown yes
Markup Shorthands: dfn yes
Markup Shorthands: idl yes
</pre>

<pre class=link-defaults>
  spec:dom; type:attribute; text:host
  spec:dom; type:dfn; text:host
  spec:dom; type:dfn; for:/; text:shadow root
  spec:dom; type:dfn; for:/; text:element
</pre>

<pre class=anchors>
urlPrefix: https://www.w3.org/TR/core-aam-1.1/; spec: core-aam
    type: dfn;
        text: accessible object; url: dfn-accessible-object
        text: accessibility tree; url: dfn-accessibility-tree
        text: associated; url: include_elements
        text: mapped; url: mapping_general
        text: mapped role; url: mapping_role
        text: mapped "multiselectable" state; url: ariaMultiselectableFalse

urlPrefix: https://www.w3.org/TR/html-aam-1.0/; spec: html-aam
    type: dfn;
        text: role of button; url: details-id-17

urlPrefix: https://www.w3.org/TR/wai-aria-1.2/; spec: ARIA
    type: interface
        text: AccessibilityRole; url: idl-def-accessibilityrole
        text: AriaAttributes; url: idl-def-ariaattributes
    type: attribute
        text: role; url: idl-def-accessibilityrole-role
        text: ariaActiveDescendant; url: idl-def-ariaattributes-ariaactivedescendant
        text: ariaSelected; url: idl-def-ariaattributes-ariaselected

urlPrefix: https://html.spec.whatwg.org/multipage/custom-elements.html; spec: html
    type: interface
        text: ElementDefinitionOptions
        text: CustomElementRegistry
    type: dfn
        url: custom-element-definition
            text: defined
            text: custom element definition

</pre>

# Providing default <a>custom element</a> semantics via {{define()|CustomElementRegistry.define()}} # {#default-semantics}

<section class="non-normative">
## Introduction ## {#mapping-custom-elements-intro}

<em>This section is non-normative.</em>

Authors may provide immutable default semantics for a custom element
by setting properties via the {{ElementDefinitionOptions}} object
passed in to the {{define()|CustomElementRegistry.define()}} method.

The properties set on the {{ElementDefinitionOptions}} object
become the default values to be used when <a>mapping</a>
the custom element to an <a>accessible object</a>.

<aside class="example">
For example, an author creating a custom tab control
may define three custom elements for the individual tabs,
the tab list and the tab panel:
```js
class TabListElement extends HTMLElement { ... }
customElements.define("custom-tablist", TabListElement,
                      { role: "tablist" });

class TabElement extends HTMLElement { ... }
customElements.define("custom-tab", TabElement,
                      { role: "tab", ariaSelected: "false" });

class TabPanelElement extends HTMLElement { ... }
customElements.define("custom-tabpanel", TabPanelElement,
                      { role: "tabpanel" });
```

When a `<custom-tab>` element is <a>mapped</a> into the <a>accessibility tree</a>,
by default it will have a <a>mapped role</a> of `tab`.

This is analogous to how a `<button>` element is, by default,
mapped to an <a>accessible object</a> with a <a>role of `button`</a>.

Since an element's semantics may change with the element's state and properties,
the custom element's implementation may write out ARIA attributes
to express the semantics for each instance of the element,
at each point in time.

For example, in the above example,
the implementation for the `<custom-tab>` prototype might look something like this:

```js
class TabElement extends HTMLElement {
  constructor() { /* ... */ }

  static get observedAttributes() { return ["selected"]; }

  connectedCallback() {
    this._tablist = this.parentElement;
  }

  setTabPanel(tabpanel) {
    if (tabpanel.localName !== "custom-tabpanel" || tabPanel.id === "")
      return;  // fail silently

    this._tabpanel = tabpanel;
    this.ariaControls = tabPanel.id;          // reflects to "aria-controls" attribute
  }

  // ... setters/getters for custom properties which reflect to attributes

  // When the custom "selected" attribute changes,
  // keep the accessible checked state in sync.
  attributeChangedCallback(name, oldValue, newValue) {
    switch(name) {
      case "selected":
        let selected = (newValue != null);
        this._tabpanel.shown = selected;      // the tabpanel handles its own show/hide logic
        this.ariaSelected = selected;         // reflects to "aria-selected" attribute
        if (selected)
          this._tablist.setSelectedTab(this); // ensure no other tab has `selected` set
        break;
    }
  }
}
```

So the resulting DOM might look something like this:

```html
<custom-tablist>
  <custom-tab selected aria-controls="section-1" aria-selected="true">
    Section 1
  </custom-tab>
  <custom-tab aria-controls="section-2" aria-selected="false">
    Section 2
  </custom-tab>
</custom-tablist>
<custom-tabpanel id="section-1">
  Lorem ipsum dolor sit amet, consectetur adipiscing elit...
</custom-tabpanel>
<custom-tabpanel id="section-2" style="display: none;">
  Lorem ipsum dolor sit amet, consectetur adipiscing elit...
</custom-tabpanel>
```

Or, they may optionally use a {{ShadowRoot}} to encapsulate those semantics -
see [[#shadowroot-semantics]].

Finally, authors using these elements may override the default semantics
using ARIA attributes as normal -
see [[#semantics-precedence]].

For example, an author may wish to use the tab list
as as type of horizontal list box widget.
They could omit the tabpanel and add appropriate ARIA roles
such that each tab acts as an option,
while the tablist acts as a list box.

```html
<custom-tablist role=listbox>
  <custom-tab role=option>Option 1</custom-tab>
  <custom-tab role=option>Option 2</custom-tab>
  <custom-tab role=option>Option 3</custom-tab>
</custom-tablist>
```

Because the author-provided role overrides the default role,
the <a>mapped</a> role will be based on the author-provided role in each case.
</aside>
</section>

## Changes to custom element definition ## {#element-definition-options}

Advisement: This section represents changes which should be made to [[HTML#custom-elements-core-concepts]], [[HTML#custom-element-definition]], [[HTML#custom-elements-api]] and [[HTML#element-definition]].

A custom element may have semantics defined when the custom element is <a>defined</a>. Otherwise, an autonomous custom element does not have any special meaning: it represents its children. A customized built-in element inherits the semantics of the element that it extends.

A custom element definition [includes]:

<dl>
  <dt>A set of default values for <dfn>semantic properties</dfn> (optional)</dt>
  <dd>
    A map, whose keys are each an attribute in either the
    {{AccessibilityRole}} or {{AriaAttributes}} interface mixin.
    The corresponding values are {{DOMString}}.
  </dd>
</dl>

<pre class="idl">
// Existing IDL
/*
interface CustomElementRegistry {
  [CEReactions] void define(DOMString name, CustomElementConstructor constructor, optional ElementDefinitionOptions options);
  // ...
};

dictionary ElementDefinitionOptions {
  DOMString extends;
};
*/
ElementDefinitionOptions includes AccessibilityRole;
ElementDefinitionOptions includes AriaAttributes;
</pre>

<strong>Element definition</strong> is a process of adding a
<a>custom element definition</a> to the {{CustomElementRegistry}}.
This is accomplished by the {{define()}} method.
When invoked, the {{define(name, constructor, options)}} method must run these steps:

[...]
<ol start=11>
  <li>Run the following substeps:
    <ol>
      <li>Let <var>semantics</var> be an empty map.
      <li>For each key defined in {{AccessibilityRole}} and {{AriaAttributes}}:
        <ol>
          <li>If the key exists in <var>options</var>,
            add an entry to <var>semantics</var> with that key
            and the value provided in <var>options</var>.
        </ol>
      </li>
      <li>If <var>semantics</var> is empty, set it to `null`.
    </ol>
  </li>
  <li>Let <var ignore>definition</var> be
    a new <a>custom element definition</a>
    with name <var ignore>name</var>,
    local name <var ignore>local name</var>,
    constructor <var ignore>constructor</var>,
    observed attributes <var ignore>observedAttributes</var>,
    lifecycle callbacks <var ignore>lifecycleCallbacks</var>,
    and, if <var>semantics</var> is non-null,
    <a>semantic properties</a> <var>semantics</var>.
</ol>
[...]

# Providing encapsulated <a>custom element</a> semantics via {{ShadowRoot}} # {#shadowroot-semantics}

<section class=non-normative>
## Introduction ## {#shadowroot-semantics-intro}

If an {{Element}} has an attached {{ShadowRoot}},
and the author has access to the {{ShadowRoot}}
(for example, if the author is creating a
<a>custom element</a> definition,
and attaches the {{ShadowRoot}} in the element constructor),
authors may set a {{role}} or ARIA attribute,
such as {{ariaActiveDescendant}},
on the {{ShadowRoot}}.

The properties set on the {{ShadowRoot}} object
are used when <a>mapping</a> the <a>host</a> element
to an <a>accessible object</a>.

This allows authors to encapsulate semantics,
in particular <em>dynamic</em> semantics
(i.e. semantics like {{ariaSelected}} which are inherently likely to change),
within the {{ShadowRoot}}.

<aside class="example">
For example,
an author creating a [=custom element=] may use a {{ShadowRoot}}
to encapsulate implementation details for the element.

They may use the custom element definition to specify the role,
and the {{ShadowRoot}} to encapsulate dynamic semantic properties
for the element,
which an author using the [=custom element=] may choose
to override using reflected ARIA properties.

```js
class CustomCheckbox extends HTMLElement {

  // ...

  constructor() {
    super();
    this.attachShadow({mode: 'open'});  // mode may also be "closed".

    // ... any other set-up
  }

  // Observe the custom "checked" attribute
  static get observedAttributes() { return ["checked"]; }

  // ... setters/getters for properties which reflect to attributes

  // When the custom "checked" attribute changes,
  // keep the accessible checked state in sync.
  attributeChangedCallback(name, oldValue, newValue) {
  switch(name) {
    case "checked":
      this.shadowRoot.ariaChecked = (newValue !== null);
    }
  }
}

customElements.define("custom-checkbox", CustomCheckbox, { role: "checkbox" });
```
</aside>

</section>

## Changes to {{ShadowRoot}} ## {#shadowroot-updates}

<pre class="idl">
// Existing IDL
/*
interface ShadowRoot : DocumentFragment {
  readonly attribute ShadowRootMode mode;
  readonly attribute Element host;
};
*/
ShadowRoot includes AccessibilityRole;
ShadowRoot includes AriaAttributes;
</pre>

A <a>shadow root</a>, like an <a>element</a>,
includes the {{AccessibilityRole}} and {{AriaAttributes}} mixins.
Setting any property from these mixins on the <a>shadow root</a>
is equivalent to setting the same property on the <a>host</a>,
without <a lt=reflect>reflection</a>,
unless the property is <em>also</em> set on the <a>host</a>.

# ARIA semantic precedence between {{ElementDefinitionOptions}}, {{ShadowRoot}} and {{host}} # {#semantics-precedence}

<section class=non-normative>
## Introduction ## {#semantics-precedence-intro}

<em>This section is non-normative</em>

In general, the precedence of semantic properties is that
any ARIA property set directly on the {{Element}}
(either via setting an attribute or via the associated property)
overrides a value for the same property on the `Element`'s attached {{ShadowRoot}},
and any ARIA property set either on the `Element` or the `ShadowRoot`
will override a value set via the {{define()|CustomElementRegistry.define()}} method.

An author using the custom element could then use the reflected ARIA properties/content attributes to override the
default values, just as they would when using a native element:</p>

```html
<!-- ARIA role overrides Shadow DOM role -->
<custom-checkbox role="radio">
```
</section>

## Mapping semantics to the accessibility tree ## {#custom-elements-semantics-mapping}

Advisement: This section represents changes which should be made to [[html-aam-1.0#mapping-html-to-accessibility-apis]].
